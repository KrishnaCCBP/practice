const express = require("express");
const path = require("path");

const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const bcrypt = require("bcrypt");
const app = express();

app.use(express.json());

const dbPath = path.join(__dirname, "userData.db");

let db = null;

const initializeDBAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
    app.listen(4000, () => {
      console.log("Server Running at http://localhost:4000/");
    });
  } catch (e) {
    console.log(`DB Error: ${e.message}`);
    process.exit(1);
  }
};

initializeDBAndServer();

//Register API

app.post("/register", async (request, response) => {
  const { username, name, password, gender, location } = request.body;
  let isPasswordGreaterThanFive = false;
  if (request.body.password.length() >= 5) {
    isPasswordGreaterThanFive = true;
  } else {
    isPasswordGreaterThanFive = false;
  }
  const hashedPassword = await bcrypt.hash(request.body.password, 10);
  const selectUserQuery = `SELECT * FROM user WHERE username = '${username}'`;
  const dbUser = await db.get(selectUserQuery);
  if (dbUser === undefined) {
    if (isPasswordGreaterThanFive === true) {
      const createUserQuery = `
            INSERT INTO 
                user (username, name, password, gender, location) 
            VALUES 
                (
                '${username}', 
                '${name}',
                '${hashedPassword}', 
                '${gender}',
                '${location}'
                )`;
      const dbResponse = await db.run(createUserQuery);
      response.status(200);
      response.send("User created successfully");
    } else {
      response.status(400);
      response.send("Password is too short");
    }
  } else {
    response.status(400);
    response.send("User already exists");
  }
});

//Login API

app.post("/login", async (request, response) => {
  const { username, password } = request.body;
  const selectUserQuery = `SELECT * FROM user WHERE username = '${username}'`;
  const dbUser = await db.get(selectUserQuery);
  if (dbUser === undefined) {
    response.status(400);
    response.send("Invalid user");
  } else {
    const isPasswordMatched = await bcrypt.compare(password, dbUser.password);
    if (isPasswordMatched === true) {
      response.send("Login success!");
    } else {
      response.status(400);
      response.send("Invalid Password");
    }
  }
});

//Change Password API

app.put("/change-password", async (request, response) => {
  const { username, oldPassword, newPassword } = request.body;
  const selectUserQuery = `SELECT * FROM user WHERE username = '${username}'`;
  const dbUser = await db.get(selectUserQuery);
  const newHashedPassword = await bcrypt.hash(request.body.newPassword, 10);
  let isNewPasswordLengthGreaterThanFive = false;
  if (request.body.newPassword.length() >= 5) {
    isNewPasswordLengthGreaterThanFive = true;
  } else {
    isNewPasswordLengthGreaterThanFive = false;
  }
  const isPasswordMatched = await bcrypt.compare(
    request.body.oldPassword,
    dbUser.password
  );
  if (isPasswordMatched === true) {
    if (isNewPasswordLengthGreaterThanFive === true) {
      const updatePasswordQuery = `
            UPDATE
                book
            SET
                password='${newHashedPassword}'
            WHERE
                username = '${username}'`;
      await db.run(updatePasswordQuery);
      response.status(200);
      response.send("Password updated");
    } else {
      response.status(400);
      response.send("Password is too short");
    }
  } else {
    response.status(400);
    response.send("Invalid current password");
  }
});

module.exports = app;
